struct InnerStructType {
  long im1;
  long im2;
};

struct StructType {
  long m1;
  long m2;
  long m3[3];
  InnerStructType inner;
  sequence<long, 3> m4;
};

struct SimpleStruct {
    long m1;
    InnerStructType inner;
    sequence<InnerStructType, 2> inner_seq;
};

struct BaseStruct {
    uint64 ui64;
    uint64 other;
    uint16 other_ui16_array[2];
};

union UnionType switch (long) {
    case 0:
    long case1;

    case 1:
    StructType case2;

    default:
    long case_default;
};

typedef long SimpleArray[4];

struct ComplexType : BaseStruct{
  int32 array[4];
  int32 s_matrix[3][3];
  int32 h_matrix[2][3];
  int32 v_matrix[3][2];
  SimpleStruct c_array[2];

  sequence<long, 10> longseq;
  sequence<StructType, 10> structseq;
  StructType struct_member;
  long simple1;
  long simple2;

  //sequence<UnionType, 10> unionseq;

  // @optional StructType complex_opt;
  @optional long simple_opt;
  @optional SimpleArray array_opt;
  UnionType union_member;
  long hello3;
  string strmember;
  int8 i8;
  uint8 ui8;
  int16 i16;
  uint16 ui16;
  int32 i32;
  uint32 ui32;
  int64 i64;
  uint64 ui64;
  char c;
  float f;
  double d;
  wstring wstrmember;
  wstring wstr_array[20];
};
